local ffi = require("ffi")

ffi.cdef[[
void L_Free(char*);
void L_EnableCallback(unsigned int);
unsigned int L_RandomU32();
float L_RandomFloat();
unsigned int L_Random(unsigned int);
void L_RandomUnitVector(Vector2*);
void L_DebugString(const char*);
Entity_Player* LL_Isaac__GetPlayer(int);
int LL_Isaac__GetFrameCount();
void LL_Isaac__RenderText(const char*,float,float,const Color*);
void LL_Isaac__RenderScaledText(const char*,float,float,float,float,const Color*);
unsigned int LL_Isaac__GetTextWidth(const char*);
void LL_Isaac__GetRandomPosition(Vector2*);
void LL_Isaac__GetFreeNearPosition(Vector2*,const Vector2*,float,bool);
int LL_Isaac__AddPillEffectToPool(int);
int LL_Isaac__GetChallenge();
int LL_Isaac__GetEntityTypeByName(const char*);
int LL_Isaac__GetEntityVariantByName(const char*);
int LL_Isaac__GetItemIdByName(const char*);
int LL_Isaac__GetPlayerTypeByName(const char*);
int LL_Isaac__GetCardIdByName(const char*);
int LL_Isaac__GetPillEffectByName(const char*);
int LL_Isaac__GetTrinketIdByName(const char*);
int LL_Isaac__GetChallengeIdByName(const char*);
int LL_Isaac__GetCostumeIdByPath(const char*);
int LL_Isaac__GetCurseIdByName(const char*);
int LL_Isaac__GetMusicIdByName(const char*);
int LL_Isaac__GetSoundIdByName(const char*);
unsigned int LL_Isaac__GetTime();
const char* LL_Isaac__ExecuteCommand(const char*);
void LL_Isaac__ConsoleOutput(const char*);
EL* LL_Isaac__FindInRadius(const Vector2*,float,unsigned int);
EL* LL_Isaac__FindByType(int,int,int,bool,bool);
int LL_Isaac__CountEntities(Entity*,int,int,int);
int LL_Isaac__CountBosses();
int LL_Isaac__CountEnemies();
float LL_Isaac__GetScreenWidth();
float LL_Isaac__GetScreenHeight();
float LL_Isaac__GetPointScale();
void LL_Isaac__ScreenToWorld(Vector2*,const Vector2*);
void LL_Isaac__WorldToScreen(Vector2*,const Vector2*);
void LL_Isaac__WorldToScreenDistance(Vector2*,const Vector2*);
void LL_Isaac__WorldToRenderPosition(Vector2*,const Vector2*);
void LL_Isaac__ScreenToWorldDistance(Vector2*,const Vector2*);
bool LL_Input__IsButtonTriggered(unsigned int,unsigned int);
bool LL_Input__IsButtonPressed(unsigned int,unsigned int);
float LL_Input__GetButtonValue(unsigned int,unsigned int);
bool LL_Input__IsActionTriggered(unsigned int,unsigned int);
bool LL_Input__IsActionPressed(unsigned int,unsigned int);
float LL_Input__GetActionValue(unsigned int,unsigned int);
bool LL_Input__IsMouseBtnPressed(int);
void LL_Input__GetMousePos(Vector2*,bool);
void LC_RNG__SetSeed(RNG*,unsigned int,unsigned int);
unsigned int LC_RNG__RandomInt(RNG*,unsigned int);
float LC_RNG__RandomFloat(RNG*);
unsigned int LC_RNG__Next(RNG*);
void L_Mod_SaveData(const char*,const char*,int);
char* L_Mod_LoadData(const char*,int*);
bool L_Mod_HasData(const char*);
void L_Mod_RemoveData(const char*);
void LL_Music__Play(int,float);
void LL_Music__Fadein(int,float);
void LL_Music__Crossfade(int);
void LL_Music__Queue(int);
void LL_Music__Fadeout();
void LL_Music__Pause();
void LL_Music__Resume();
void LL_Music__SetLayerEnabled(bool);
bool LL_Music__IsLayerEnabled();
void LL_Music__SetEnabled(bool);
bool LL_Music__IsEnabled();
void LL_Music__PitchSlide(float);
void LL_Music__ResetPitch();
void LL_Music__VolumeSlide(float);
void LL_Music__UpdateVolume();
int LL_Music__GetCurrentMusicID();
int LL_Music__GetQueuedMusicID();
void LL_SFX__Play(int,float,int,bool,float);
void LL_SFX__AdjustVolume(int,float);
void LL_SFX__AdjustPitch(int,float);
void LL_SFX__Stop(int);
void LL_SFX__StopLoopingSounds();
void LL_SFX__Preload(int);
bool LL_SFX__IsPlaying(int);
void LL_SFX__SetAmbientSound(int,float,float);
float LL_SFX__GetAmbientSoundVolume(int);
unsigned int LC_Entity__GetRef(Entity*);
void LC_Entity__SetRef(Entity*,unsigned int);
float LC_Entity__GetFriction(Entity*);
void LC_Entity__SetFriction(Entity*,float);
void LC_Entity__GetPosition(Vector2*,Entity*);
void LC_Entity__SetPosition(Entity*,const Vector2*);
void LC_Entity__GetVelocity(Vector2*,Entity*);
void LC_Entity__SetVelocity(Entity*,const Vector2*);
void LC_Entity__GetDefaultColor(ColorMod*,Entity*);
void LC_Entity__GetColor(ColorMod*,Entity*);
void LC_Entity__SetColor(Entity*,const ColorMod*,int,int,bool,bool);
void LC_Entity__Update(Entity*);
void LC_Entity__Render(Entity*,const Vector2*);
bool LC_Entity__RenderShadowLayer(Entity*,const Vector2*);
void LC_Entity__PostRender(Entity*);
bool LC_Entity__TakeDamage(Entity*,float,unsigned int,const EntityRef*,int);
bool LC_Entity__HasMortalDamage(Entity*);
void LC_Entity__Kill(Entity*);
void LC_Entity__Die(Entity*);
void LC_Entity__Remove(Entity*);
void LC_Entity__BloodExplode(Entity*);
int LC_Entity__GetType(Entity*);
int LC_Entity__GetVariant(Entity*);
void LC_Entity__SetVariant(Entity*,int);
int LC_Entity__GetSubType(Entity*);
void LC_Entity__SetSubType(Entity*,int);
int LC_Entity__GetSpawnerType(Entity*);
void LC_Entity__SetSpawnerType(Entity*,int);
int LC_Entity__GetSpawnerVariant(Entity*);
void LC_Entity__SetSpawnerVariant(Entity*,int);
void LC_Entity__AddVelocity(Entity*,const Vector2*);
void LC_Entity__MultiplyFriction(Entity*,float);
void LC_Entity__GetSplatColor(ColorMod*,Entity*);
void LC_Entity__SetSplatColor(Entity*,const ColorMod*);
bool LC_Entity__GetVisible(Entity*);
void LC_Entity__SetVisible(Entity*,bool);
void LC_Entity__GetPositionOffset(Vector2*,Entity*);
void LC_Entity__SetPositionOffset(Entity*,const Vector2*);
int LC_Entity__GetRenderZOffset(Entity*);
void LC_Entity__SetRenderZOffset(Entity*,int);
bool LC_Entity__GetFlipX(Entity*);
void LC_Entity__SetFlipX(Entity*,bool);
void LC_Entity__GetSpriteOffset(Vector2*,Entity*);
void LC_Entity__SetSpriteOffset(Entity*,const Vector2*);
void LC_Entity__GetSpriteScale(Vector2*,Entity*);
void LC_Entity__SetSpriteScale(Entity*,const Vector2*);
float LC_Entity__GetSpriteRotation(Entity*);
void LC_Entity__SetSpriteRotation(Entity*,float);
void LC_Entity__SetSpriteFrame(Entity*,const char*,int);
void LC_Entity__SetSpriteOverlayFrame(Entity*,const char*,int);
float LC_Entity__GetSize(Entity*);
void LC_Entity__SetSize(Entity*,float,const Vector2*,int);
void LC_Entity__GetSizeMulti(Vector2*,Entity*);
void LC_Entity__SetSizeMulti(Entity*,const Vector2*);
float LC_Entity__GetMass(Entity*);
void LC_Entity__SetMass(Entity*,float);
float LC_Entity__GetMaxHitPoints(Entity*);
void LC_Entity__SetMaxHitPoints(Entity*,float);
float LC_Entity__GetHitPoints(Entity*);
void LC_Entity__SetHitPoints(Entity*,float);
unsigned int LC_Entity__GetIndex(Entity*);
void LC_Entity__GetTargetPosition(Vector2*,Entity*);
void LC_Entity__SetTargetPosition(Entity*,const Vector2*);
int LC_Entity__GetGridCollisionClass(Entity*);
void LC_Entity__SetGridCollisionClass(Entity*,int);
int LC_Entity__GetEntityCollisionClass(Entity*);
void LC_Entity__SetEntityCollisionClass(Entity*,int);
float LC_Entity__GetCollisionDamage(Entity*);
void LC_Entity__SetCollisionDamage(Entity*,float);
bool LC_Entity__CollidesWithGrid(Entity*);
int LC_Entity__GetSpawnGridIndex(Entity*);
bool LC_Entity__IsEnemy(Entity*);
bool LC_Entity__IsActiveEnemy(Entity*);
bool LC_Entity__IsVulnerableEnemy(Entity*);
bool LC_Entity__IsFlying(Entity*);
void LC_Entity__AddEntityFlags(Entity*,long long int);
void LC_Entity__ClearEntityFlags(Entity*,long long int);
long long int LC_Entity__GetEntityFlags(Entity*);
bool LC_Entity__HasEntityFlags(Entity*,long long int);
bool LC_Entity__HasFullHealth(Entity*);
void LC_Entity__AddHealth(Entity*,float);
void LC_Entity__AddPoison(Entity*,const EntityRef*,int,float);
void LC_Entity__AddFreeze(Entity*,const EntityRef*,int);
void LC_Entity__AddSlowing(Entity*,const EntityRef*,int,float,const ColorMod*);
void LC_Entity__AddCharmed(Entity*,const EntityRef*,int);
void LC_Entity__AddConfusion(Entity*,const EntityRef*,int,bool);
void LC_Entity__AddMidasFreeze(Entity*,const EntityRef*,int);
void LC_Entity__AddFear(Entity*,const EntityRef*,int);
void LC_Entity__AddBurn(Entity*,const EntityRef*,int,float);
void LC_Entity__AddShrink(Entity*,const EntityRef*,int);
void LC_Entity__RemoveStatusEffects(Entity*);
bool LC_Entity__Exists(Entity*);
bool LC_Entity__IsDead(Entity*);
bool LC_Entity__IsVisible(Entity*);
bool LC_Entity__IsInvincible(Entity*);
bool LC_Entity__CanShutDoors(Entity*);
bool LC_Entity__IsBoss(Entity*);
int LC_Entity__GetBossID(Entity*);
Entity* LC_Entity__GetParent(Entity*);
void LC_Entity__SetParent(Entity*,Entity*);
Entity* LC_Entity__GetChild(Entity*);
void LC_Entity__SetChild(Entity*,Entity*);
Entity* LC_Entity__GetTarget(Entity*);
void LC_Entity__SetTarget(Entity*,Entity*);
Entity* LC_Entity__GetSpawnerEntity(Entity*);
void LC_Entity__SetSpawnerEntity(Entity*,Entity*);
Entity* LC_Entity__GetLastParent(Entity*);
Entity* LC_Entity__GetLastChild(Entity*);
bool LC_Entity__HasCommonParentWithEntity(Entity*,Entity*);
int LC_Entity__GetFrameCount(Entity*);
bool LC_Entity__IsFrame(Entity*,int,int);
unsigned int LC_Entity__GetInitSeed(Entity*);
unsigned int LC_Entity__GetDropSeed(Entity*);
RNG* LC_Entity__GetDropRNG(Entity*);
ANM2* LC_Entity__GetSprite(Entity*);
float LC_Entity__GetDepthOffset(Entity*);
void LC_Entity__SetDepthOffset(Entity*,float);
bool LC_Entity__IsEntityConnected(Entity*,Entity*);
bool LC_Entity__DoesEntityShareStatus(Entity*);
void LL_Game__Update();
void LL_Game__Render();
bool LL_Game__IsPaused();
Entity* LL_Game__Spawn(int,unsigned int,const Vector2*,const Vector2*,Entity*,unsigned int,unsigned int);
void LL_Game__BombDamage(const Vector2*,float,float,bool,Entity*,const bitset128_t*,unsigned int,bool);
void LL_Game__BombExplosionEffects(const Vector2*,float,const bitset128_t*,const ColorMod*,Entity*,float,bool,bool);
void LL_Game__BombTearflagEffects(const Vector2*,float,const bitset128_t*,Entity*);
void LL_Game__Fart(const Vector2*,float,Entity*,float,unsigned int);
void LL_Game__CharmFart(const Vector2*,float,Entity*);
void LL_Game__ButterBeanFart(const Vector2*,float,Entity*,bool);
bool LL_Game__RerollEnemy(Entity*);
void LL_Game__SpawnParticles(const Vector2*,int,int,float,const ColorMod*,float,unsigned int);
Font* LL_Game__GetFont();
Entity_Player* LL_Game__GetNearestPlayer(const Vector2*);
Entity_Player* LL_Game__GetRandomPlayer(const Vector2*,float);
int LL_Game__GetNumPlayers();
void LL_Game__End(int);
void LL_Game__ShowFortune();
void LL_Game__ShowRule();
void LL_Game__StartRoomTransition(int,int,int,Entity_Player*);
void LL_Game__ChangeRoom(int);
void LL_Game__StartStageTransition(bool,int,Entity_Player*);
void LL_Game__MoveToRandomRoom(bool,unsigned int);
int LL_Game__GetFrameCount();
bool LL_Game__GetStateFlag(int);
void LL_Game__SetStateFlag(int,bool);
int LL_Game__GetBossRushParTime();
void LL_Game__SetBossRushParTime(int);
int LL_Game__GetBlueWombParTime();
void LL_Game__SetBlueWombParTime(int);
int LL_Game__GetLastDevilRoomStage();
void LL_Game__SetLastDevilRoomStage(int);
void LL_Game__AddTreasureRoomsVisited();
int LL_Game__GetTreasureRoomVisitCount();
void LL_Game__AddStageWithoutHeartsPicked();
void LL_Game__ClearStagesWithoutHeartsPicked();
int LL_Game__GetStagesWithoutHeartsPicked();
void LL_Game__AddStageWithoutDamage();
void LL_Game__ClearStagesWithoutDamage();
int LL_Game__GetStagesWithoutDamage();
void LL_Game__DonateGreed(int);
void LL_Game__DonateAngel(int);
int LL_Game__GetDevilRoomDeals();
int LL_Game__GetDonationModGreed();
int LL_Game__GetDonationModAngel();
void LL_Game__ClearDonationModGreed();
void LL_Game__ClearDonationModAngel();
int LL_Game__GetLastLevelWithDamage();
void LL_Game__SetLastLevelWithDamage(int);
void LL_Game__AddEncounteredBoss(int,unsigned int);
int LL_Game__GetNumEncounteredBosses();
bool LL_Game__HasEncounteredBoss(int,unsigned int);
unsigned int LL_Game__GetGreedWavesNum();
unsigned int LL_Game__GetGreedBossWaveNum();
int LL_Game__GetLastLevelWithoutHalfHp();
void LL_Game__SetLastLevelWithoutHalfHp(int);
void LL_Game__ShakeScreen(int);
void LL_Game__GetScreenShakeOffset(Vector2*);
void LL_Game__SetScreenShakeOffset(const Vector2*);
int LL_Game__GetScreenShakeCountdown();
void LL_Game__Darken(float,int);
float LL_Game__GetDarknessModifier();
void LL_Game__SetDarknessModifier(float);
float LL_Game__GetTargetDarkness();
int LL_Game__GetChallenge();
void LL_Game__SetChallenge(int);
int LL_Game__GetDifficulty();
int LL_Game__GetVictoryLap();
void LL_Game__NextVictoryLap();
bool LL_Game__IsGreedMode();
void LL_Game__RerollLevelCollectibles();
void LL_Game__RerollLevelPickups(unsigned int);
void LL_Game__FinishChallenge();
void LL_Game__AddPixelation(int);
void LL_Game__ShowHallucination(int,int);
bool LL_Game__HasHallucination();
void LL_Game__UpdateStrangeAttractor(const Vector2*);
void LL_Game__Fadein(float);
void LL_Game__Fadeout(float,int);
int LL_Game__GetTimeCounter();
void LL_Game__SetTimeCounter(int);
void LL_Level__Update();
void LL_Level__SetStage(int,int);
void LL_Level__SetNextStage();
int LL_Level__GetStage();
int LL_Level__GetCurses();
bool LL_Level__IsAltStage();
int LL_Level__GetStageType();
const char* LL_Level__GetName();
const char* LL_Level__GetCurseName();
bool LL_Level__CanStageHaveCurseOfLabyrinth(int);
void LL_Level__ShowName(bool);
bool LL_Level__GetStateFlag(int);
void LL_Level__SetStateFlag(int,bool);
int LL_Level__GetPreviousRoomIndex();
int LL_Level__GetCurrentRoomIndex();
int LL_Level__GetRoomCount();
int LL_Level__GetRandomRoomIndex(bool,unsigned int);
int LL_Level__GetNonCompleteRoomIndex();
int LL_Level__GetStartingRoomIndex();
int LL_Level__QueryRoomTypeIndex(int,bool,RNG*);
int LL_Level__GetLastBossRoomListIndex();
bool LL_Level__CanOpenChallengeRoom(int);
int LL_Level__GetEnterDoor();
void LL_Level__SetEnterDoor(int);
int LL_Level__GetLeaveDoor();
void LL_Level__SetLeaveDoor(int);
void LL_Level__GetDungeonReturnPosition(Vector2*);
void LL_Level__SetDungeonReturnPosition(const Vector2*);
int LL_Level__GetDungeonReturnRoomIndex();
void LL_Level__SetDungeonReturnRoomIndex(int);
void LL_Level__GetEnterPosition(Vector2*);
void LL_Level__ChangeRoom(int);
bool LL_Level__ForceHorsemanBoss(unsigned int);
bool LL_Level__HasBossChallenge();
bool LL_Level__IsDevilRoomDisabled();
void LL_Level__DisableDevilRoom();
void LL_Level__UpdateVisibility();
void LL_Level__ApplyMapEffect();
void LL_Level__ApplyBlueMapEffect();
void LL_Level__ApplyCompassEffect(bool);
void LL_Level__RemoveCompassEffect();
void LL_Level__ShowMap();
void LL_Level__SetHeartPicked();
bool LL_Level__GetHeartPicked();
void LL_Level__SetCanSeeEverything(bool);
bool LL_Level__GetCanSeeEverything();
void LL_Level__AddCurse(int,bool);
void LL_Level__RemoveCurse(int);
void LL_Level__RemoveCurses();
unsigned int LL_Level__GetDungeonPlacementSeed();
RNG* LL_Level__GetDevilAngelRoomRNG();
bool LL_Level__CanSpawnDevilRoom();
void LL_Level__InitializeDevilAngelRoom(bool,bool);
void LL_Level__UncoverHiddenDoor(int,int);
int LL_Level__GetGreedModeWave();
void LL_Level__SetGreedModeWave(int);
void LL_Level__SetRedHeartDamage();
bool LL_Level__IsNextStageAvailable();
int LL_Level__GetAbsoluteStage();
void LL_Level__AddAngelRoomChance(float);
float LL_Level__GetAddAngelRoomChance();
RoomDescriptor* LL_Level__GetRoomByIdx(int);
RoomDescriptor* LL_Level__GetCurrentRoomDesc();
RoomDescriptor* LL_Level__GetLastRoomDesc();
RoomDescriptor* LL_Level__GetRooms(int*);
int LC_Entity_Player__GetHearts(Entity_Player*);
int LC_Entity_Player__GetMaxHearts(Entity_Player*);
int LC_Entity_Player__GetEffectiveMaxHearts(Entity_Player*);
int LC_Entity_Player__GetHeartLimit(Entity_Player*,bool);
int LC_Entity_Player__GetSoulHearts(Entity_Player*);
int LC_Entity_Player__GetBlackHearts(Entity_Player*);
int LC_Entity_Player__GetEternalHearts(Entity_Player*);
int LC_Entity_Player__GetExtraLives(Entity_Player*);
int LC_Entity_Player__GetNumBombs(Entity_Player*);
int LC_Entity_Player__GetNumKeys(Entity_Player*);
bool LC_Entity_Player__HasGoldenKey(Entity_Player*);
bool LC_Entity_Player__HasGoldenBomb(Entity_Player*);
int LC_Entity_Player__GetGoldenHearts(Entity_Player*);
int LC_Entity_Player__GetNumCoins(Entity_Player*);
int LC_Entity_Player__GetPlayerType(Entity_Player*);
int LC_Entity_Player__GetTrinket(Entity_Player*,unsigned int);
float LC_Entity_Player__GetLuck(Entity_Player*);
float LC_Entity_Player__GetSpeed(Entity_Player*);
int LC_Entity_Player__GetNumBlueFlies(Entity_Player*);
int LC_Entity_Player__GetNumBlueSpiders(Entity_Player*);
void LC_Entity_Player__RenderGlow(Entity_Player*,const Vector2*);
void LC_Entity_Player__RenderBody(Entity_Player*,const Vector2*);
void LC_Entity_Player__RenderHead(Entity_Player*,const Vector2*);
void LC_Entity_Player__RenderTop(Entity_Player*,const Vector2*);
const char* LC_Entity_Player__GetName(Entity_Player*);
bool LC_Entity_Player__HasFullHearts(Entity_Player*);
bool LC_Entity_Player__HasFullHeartsSoulHearts(Entity_Player*);
void LC_Entity_Player__AddMaxHearts(Entity_Player*,int);
void LC_Entity_Player__AddHearts(Entity_Player*,int);
void LC_Entity_Player__AddEternalHearts(Entity_Player*,int);
void LC_Entity_Player__AddSoulHearts(Entity_Player*,int);
void LC_Entity_Player__AddBlackHearts(Entity_Player*,int);
void LC_Entity_Player__RemoveBlackHeart(Entity_Player*,int);
bool LC_Entity_Player__IsBlackHeart(Entity_Player*,int);
void LC_Entity_Player__AddJarHearts(Entity_Player*,int);
int LC_Entity_Player__GetJarHearts(Entity_Player*);
void LC_Entity_Player__AddJarFlies(Entity_Player*,int);
int LC_Entity_Player__GetJarFlies(Entity_Player*);
void LC_Entity_Player__AddCoins(Entity_Player*,int);
void LC_Entity_Player__AddBombs(Entity_Player*,int);
void LC_Entity_Player__AddKeys(Entity_Player*,int);
void LC_Entity_Player__AddGoldenKey(Entity_Player*);
void LC_Entity_Player__RemoveGoldenKey(Entity_Player*);
void LC_Entity_Player__AddGoldenBomb(Entity_Player*);
void LC_Entity_Player__RemoveGoldenBomb(Entity_Player*);
void LC_Entity_Player__AddGoldenHearts(Entity_Player*,int);
Entity* LC_Entity_Player__AddBlueSpider(Entity_Player*,const Vector2*);
Entity* LC_Entity_Player__ThrowBlueSpider(Entity_Player*,const Vector2*,const Vector2*);
void LC_Entity_Player__RemoveBlueSpider(Entity_Player*);
Entity* LC_Entity_Player__AddBlueFlies(Entity_Player*,int,const Vector2*,Entity*);
void LC_Entity_Player__RemoveBlueFly(Entity_Player*);
void LC_Entity_Player__AddPrettyFly(Entity_Player*);
bool LC_Entity_Player__TryUseKey(Entity_Player*);
void LC_Entity_Player__ClearCostumes(Entity_Player*);
bool LC_Entity_Player__FlushQueueItem(Entity_Player*);
int LC_Entity_Player__IsItemQueueEmpty(Entity_Player*);
void LC_Entity_Player__AddCollectible(Entity_Player*,unsigned int,int,bool);
void LC_Entity_Player__RemoveCollectible(Entity_Player*,unsigned int);
void LC_Entity_Player__DropCollectible(Entity_Player*,unsigned int);
unsigned int LC_Entity_Player__GetCollectibleCount(Entity_Player*);
void LC_Entity_Player__AddTrinket(Entity_Player*,unsigned int);
bool LC_Entity_Player__TryRemoveTrinket(Entity_Player*,unsigned int);
void LC_Entity_Player__DropTrinket(Entity_Player*,const Vector2*,bool);
int LC_Entity_Player__GetMaxTrinkets(Entity_Player*);
int LC_Entity_Player__GetMaxPocketItems(Entity_Player*);
void LC_Entity_Player__DropPocketItem(Entity_Player*,unsigned int,const Vector2*);
void LC_Entity_Player__ClearTemporaryEffects(Entity_Player*);
void LC_Entity_Player__DonateLuck(Entity_Player*,int);
bool LC_Entity_Player__CanPickRedHearts(Entity_Player*);
bool LC_Entity_Player__CanPickSoulHearts(Entity_Player*);
bool LC_Entity_Player__CanPickBlackHearts(Entity_Player*);
bool LC_Entity_Player__CanPickGoldenHearts(Entity_Player*);
bool LC_Entity_Player__CanPickBoneHearts(Entity_Player*);
int LC_Entity_Player__FindActiveItem(Entity_Player*,int);
unsigned int LC_Entity_Player__GetActiveItem(Entity_Player*,int);
int LC_Entity_Player__GetActiveCharge(Entity_Player*,int);
int LC_Entity_Player__GetBatteryCharge(Entity_Player*,int);
int LC_Entity_Player__GetActiveSubCharge(Entity_Player*,int);
void LC_Entity_Player__SetActiveCharge(Entity_Player*,int,int);
void LC_Entity_Player__DischargeActiveItem(Entity_Player*,int);
bool LC_Entity_Player__NeedsCharge(Entity_Player*,int);
bool LC_Entity_Player__FullCharge(Entity_Player*,int);
void LC_Entity_Player__AddCard(Entity_Player*,unsigned int);
void LC_Entity_Player__AddPill(Entity_Player*,unsigned int);
unsigned int LC_Entity_Player__GetCard(Entity_Player*,unsigned int);
unsigned int LC_Entity_Player__GetPill(Entity_Player*,unsigned int);
void LC_Entity_Player__SetCard(Entity_Player*,unsigned int,unsigned int);
void LC_Entity_Player__SetPill(Entity_Player*,unsigned int,unsigned int);
bool LC_Entity_Player__HasCollectible(Entity_Player*,unsigned int);
int LC_Entity_Player__GetCollectibleNum(Entity_Player*,unsigned int);
bool LC_Entity_Player__HasTrinket(Entity_Player*,unsigned int);
bool LC_Entity_Player__HasPlayerForm(Entity_Player*,unsigned int);
bool LC_Entity_Player__CanAddCollectible(Entity_Player*);
bool LC_Entity_Player__TryHoldTrinket(Entity_Player*,unsigned int);
void LC_Entity_Player__SetFullHearts(Entity_Player*);
void LC_Entity_Player__AddCacheFlags(Entity_Player*,int);
void LC_Entity_Player__EvaluateItems(Entity_Player*);
void LC_Entity_Player__RespawnFamiliars(Entity_Player*);
void LC_Entity_Player__GetTearsOffset(Vector2*,Entity_Player*);
void LC_Entity_Player__SetTearsOffset(Entity_Player*,const Vector2*);
Entity* LC_Entity_Player__GetNPCTarget(Entity_Player*);
int LC_Entity_Player__GetMovementDirection(Entity_Player*);
int LC_Entity_Player__GetFireDirection(Entity_Player*);
int LC_Entity_Player__GetHeadDirection(Entity_Player*);
void LC_Entity_Player__GetAimDirection(Vector2*,Entity_Player*);
void LC_Entity_Player__GetMovementVector(Vector2*,Entity_Player*);
void LC_Entity_Player__GetRecentMovementVector(Vector2*,Entity_Player*);
void LC_Entity_Player__GetMovementInput(Vector2*,Entity_Player*);
void LC_Entity_Player__GetShootingInput(Vector2*,Entity_Player*);
bool LC_Entity_Player__AreOpposingShootDirectionsPressed(Entity_Player*);
void LC_Entity_Player__GetLastDirection(Vector2*,Entity_Player*);
void LC_Entity_Player__GetVelocityBeforeUpdate(Vector2*,Entity_Player*);
float LC_Entity_Player__GetSmoothBodyRotation(Entity_Player*);
float LC_Entity_Player__GetTearPoisonDamage(Entity_Player*);
void LC_Entity_Player__GetBombFlags(bitset128_t*,Entity_Player*);
unsigned int LC_Entity_Player__GetBombVariant(Entity_Player*,const bitset128_t*,bool);
int LC_Entity_Player__GetItemState(Entity_Player*);
void LC_Entity_Player__UseActiveItem(Entity_Player*,unsigned int,bool,bool,bool,bool);
float LC_Entity_Player__GetTearRangeModifier(Entity_Player*);
int LC_Entity_Player__GetTrinketMultiplier(Entity_Player*);
int LC_Entity_Player__GetBoneHearts(Entity_Player*);
bool LC_Entity_Player__IsBoneHeart(Entity_Player*,int);
void LC_Entity_Player__AddBrokenHearts(Entity_Player*,int);
int LC_Entity_Player__GetBrokenHearts(Entity_Player*);
void LC_Entity_Player__AddRottenHearts(Entity_Player*,int);
int LC_Entity_Player__GetRottenHearts(Entity_Player*);
int LL_ItemPool__GetCollectible(int,unsigned int,unsigned int);
bool LL_ItemPool__RemoveCollectible(int,bool);
bool LL_ItemPool__RemoveTrinket(int);
void LL_ItemPool__ResetTrinkets(int);
int LL_ItemPool__GetTrinket();
int LL_ItemPool__GetCard(unsigned int,bool,bool,bool);
int LL_ItemPool__GetCardEx(unsigned int,unsigned int,unsigned int,unsigned int,bool);
int LL_ItemPool__GetPill(unsigned int);
int LL_ItemPool__GetPillEffect(unsigned int,Entity_Player*);
void LL_ItemPool__IdentifyPill(unsigned int);
bool LL_ItemPool__IsPillIdentified(unsigned int);
int LL_ItemPool__ForceAddPillEffect(unsigned int);
int LL_ItemPool__GetLastPool();
int LL_ItemPool__GetPoolForRoom(int,unsigned int);
void LL_ItemPool__ResetRoomBlacklist();
void LL_ItemPool__AddRoomBlacklist(int);
void LL_ItemPool__AddBibleUpgrade(int,int);
bool LL_ItemPool__IsInBlacklist(int);
bool LL_ItemPool__IsInRoomBlacklist(int);
int LL_ItemPool__GetCollectibleFromList(int*,unsigned int,unsigned int,int,bool);
bool LC_ANM2__IsFinished(ANM2*,const char*);
void LC_ANM2__Play(ANM2*,const char*,bool);
void LC_ANM2__SetFrame(ANM2*,const char*,int);
void LC_ANM2__SetFrame2(ANM2*,int);
void LC_ANM2__Reset(ANM2*);
void LC_ANM2__Update(ANM2*);
void LC_ANM2__Render(ANM2*,const Vector2*,const Vector2*,const Vector2*);
void LC_ANM2__RenderLayer(ANM2*,int,const Vector2*);
void LC_ANM2__Load(ANM2*,const char*,bool);
void LC_ANM2__Reload(ANM2*);
void LC_ANM2__ReplaceSpritesheet(ANM2*,int,const char*);
void LC_ANM2__LoadGraphics(ANM2*);
bool LC_ANM2__IsLoaded(ANM2*);
const char* LC_ANM2__GetFilename(ANM2*);
void LC_ANM2__PlayRandom(ANM2*,unsigned int);
void LC_ANM2__Stop(ANM2*);
bool LC_ANM2__SetAnimation(ANM2*,const char*);
int LC_ANM2__GetFrame(ANM2*);
void LC_ANM2__SetLastFrame(ANM2*);
bool LC_ANM2__IsPlaying(ANM2*,const char*);
void LC_ANM2__SetLayerFrame(ANM2*,int,int);
void LC_ANM2__PlayOverlay(ANM2*,const char*,bool);
bool LC_ANM2__SetOverlayAnimation(ANM2*,const char*);
void LC_ANM2__SetOverlayRenderPriority(ANM2*,bool);
void LC_ANM2__SetOverlayFrame(ANM2*,const char*,int);
void LC_ANM2__SetOverlayFrame2(ANM2*,int);
int LC_ANM2__GetOverlayFrame(ANM2*);
void LC_ANM2__RemoveOverlay(ANM2*);
bool LC_ANM2__IsOverlayPlaying(ANM2*,const char*);
bool LC_ANM2__IsOverlayFinished(ANM2*,const char*);
bool LC_ANM2__IsEventTriggered(ANM2*,const char*);
bool LC_ANM2__WasEventTriggered(ANM2*,const char*);
unsigned int LC_ANM2__GetLayerCount(ANM2*);
unsigned int LC_ANM2__GetNullCount(ANM2*);
const char* LC_ANM2__GetDefaultAnimationName(ANM2*);
RoomData* LL_RoomConfig__GetRoom(unsigned int,unsigned int,unsigned int);
RoomData* LL_RoomConfig__GetRandomRoom(unsigned int,bool,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,int);
void LL_RoomConfig__ResetRoomWeights(unsigned int);
LevelGenerator* L_LevelGenerator(unsigned int);
void L_LevelGenerator__destructor(LevelGenerator*);
bool LL_Level__PlaceRoom(LevelGeneratorRoom*,RoomData*,unsigned int);
LevelGeneratorRoom* LC_LevelGenerator__CreateRoom(LevelGenerator*,int,int,int,int,int,int);
void LL_HUD__ShowItemText(const char*,const char*,bool,bool);
bool LL_HUD__IsVisible();
void LL_HUD__SetVisible(bool);
void LL_HUD__HideItemText();
void LL_HUD__ShowFortuneText(const char*,const char*,const char*);
]]
